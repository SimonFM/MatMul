#!/bin/sh

# ------------------------------------------------------------------------------
# Convenience build script for the MatMul matrix multiplicaton program.
#
# Copyright (c) 2015 by its authors.
#
# This code is distributed under the BSD3 license. See AUTHORS, LICENSE.
# ------------------------------------------------------------------------------

# CONSTANTS --------------------------------------------------------------------

TARGET='./build/matmul' # Target executable

TIME_RE='[0-9]\+'       # Regex matching execution time in milliseconds
CTRL_RE='Control'       # Start of output line containing control time
MULT_RE='Matmul'        # Start of output line containing matmul  time

USAGE=\
'NAME
    run - convenience build script for the MatMul program.

SYNOPSIS
    ./run [ -d | -r [ <reps> ] ] <size>
    ./run [ -d | -r [ <reps> ] ] <A nrows> <A ncols> <B nrows> <B ncols>
    ./run -c
    ./run -h

DESCRIPTION
    Runs the MatMul matrix multiplication program, optionally in debug mode,
    with the given matrix dimensions.

OPTIONS
    -c, --clean
        Invoke "make clean".

    -d, --debug
        Run in debug mode, printing the elements of the input and resultant
        matrices.

    -h, --help
        Print this help message.

    -r, --repeat=REPS
        Run MatMul repeatedly to calculate average execution times. The default
        number of repetitions is 8.'

# VARIABLES --------------------------------------------------------------------

cppflag=''              # Optional pre-processor flags, e.g. DEBUG

reps=8                  # Default number of runs for calculating average times
total_ctrl_time=0       # Total time for control function over all runs
total_mult_time=0       # Total time for matmul  function over all runs
output=''               # Target output (containing execution times)

# FUNCTIONS --------------------------------------------------------------------

# Prints the first given argument, followed by the script's usage, before
# exiting unsuccessfully.
print_exit() {
  echo "$1"
  echo 'Invoke "./run --help" for a description of accepted arguments.'
  exit 1
}

# Exits unsuccessfully if any of the given arguments are no valid matrix
# dimensions, i.e. non-negative integers consisting solely of the digits 0-9.
assert_dimens() {
  for dimen in "$@"; do
    case $dimen in
      '' | *[!0-9]*)
        print_exit "Invalid matrix dimension: $dimen"
        ;;
      *)
        ;;
    esac
  done
}

# Invokes 'make', with preprocessor flags determined by the CPPGLAG variable,
# before running the target with the given arguments.
run_with() {
  make clean && make CPPFLAGS="$cppflag" && $TARGET $@
}

# SCRIPT -----------------------------------------------------------------------

# Check first argument for accepted flags.
case "$1" in
  -c | --clean)
    echo 'Running "make clean"'
    make clean
    exit 0
    ;;
  -d | --debug)
    cppflag='-DDEBUG'
    shift
    ;;
  -h | --help)
    echo "$USAGE"
    exit 0
    ;;
  -r | --repeat=[0-9]*)
    echo 'Yay'
    exit 0
    ;;
esac

# Check subsequent arguments are matrix dimensions before building and running
# the target.
case $# in
  1)
    assert_dimens $1
    run_with      $1 $1 $1 $1
    ;;
  4)
    assert_dimens $@
    run_with      $@
    ;;
  *)
    print_exit 'Expected 1 or 4 matrix dimensions.'
    ;;
esac
